import java.io.OutputStream;
import java.io.IOException;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.*;

/*
This file is part of Diagnostic Webserver.

Diagnostic Webserver is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Diagnostic Webserver is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Diagnostic Webserver.  If not, see <http://www.gnu.org/licenses/>.

Copyright 2008, Henze Berkheij & Mark van de Haar
*/

/**
 * This class will contain all information needed to return a response to an client. This class is instantiated by {@link Service}
 * @param socket will contain an instance of {@link #Socket}
 */

public class Response extends HashMap<String, Object>
{
	private static final long serialVersionUID = 4143310020021915666L;

	private String version;
	private OutputStream myoutputstream;
	private String headers;
	private String body = "";

	/**
	 * This will create an instance of this class.
	 * @param socket will contain an instance of {@link Socket}
	 */
	public Response(OutputStream s, String v)
	{
		myoutputstream = s;
		version = v;
	}

	/**
	 * Stores the given HTTP-code.
	 * @param code this is the HTTP-Code
	 */
	public void setCODE(int code)
	{
		put("code", code);
	}

	/**
	 * Stores the given reason which is related to the HTTP-Code
	 * @param reason a short description for the HTTP-Code
	 */
	public void setREASON(String reason)
	{
		put("reason", reason);
	}

	/**
	 * Stores the HTTP-headers plus the requested file in byte[] generated by {@link Servlet}
	 * @param bytes
	 */

	public void setBYTES(byte[] bodyBytes, Date lastModifiedDate, String contentType) 
	{
		SimpleDateFormat d = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss");
		
		headers = 
		"HTTP/1.1 "+get("code")+" "+get("reason")+"\r\n"	
		+"Date: "+d.format(new Date())+" GMT\r\n"
	    +"Content-Length: "+bodyBytes.length+"\r\n"
	    +"Last-Modified: "+d.format(lastModifiedDate)+" GMT\r\n"
	    +"Content-Type: "+contentType+"\r\n"
	    +"Server: Diagnostic Webserver/"+version+"\r\n"
	    +"\r\n";

		
		byte[] headerBytes = headers.getBytes();
		byte[] bytes = new byte[headerBytes.length+bodyBytes.length];
		System.arraycopy(headerBytes, 0, bytes, 0, headerBytes.length);
		System.arraycopy(bodyBytes, 0, bytes, headerBytes.length, bodyBytes.length);
		
		for(byte key : bodyBytes)
		{
				body+= (char)key;
		}
		
		put("bytes", bytes);
		
	}
	/**
	 * Sends the response to the client.
	 * @throws IOException when the response couldn't be written to {@link Socket}
	 */
	public void send() throws IOException
	{
		OutputStream os = myoutputstream;
	    os.write((byte[])get("bytes"));

	}
	
	public String toString()
	{
		return "\r\n--------Response---------\r\n\r\n"+headers+body+"\r\n-----End of Response-----\r\n";
	}


}